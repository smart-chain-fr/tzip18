{ parameter
    (or (or (pair %balance_of
               (contract %callback
                  (list (pair (nat %balance) (pair %request (address %owner) (nat %token_id)))))
               (list %requests (pair (address %owner) (nat %token_id))))
            (pair %get_total_supply (contract %callback nat) (unit %request)))
        (or (list %transfer (pair (address %from_) (list %tx (pair (address %to_) (nat %amount)))))
            (list %update_operators
               (or (pair %add_operator (address %owner) (address %operator) (nat %token_id))
                   (pair %remove_operator (address %owner) (address %operator) (nat %token_id)))))) ;
  storage
    (pair (pair (big_map %ledger address nat) (big_map %operators address (set address)))
          (pair (pair %token_metadata (nat %token_id) (map %token_info string bytes))
                (nat %total_supply))) ;
  code { LAMBDA
           (pair (big_map address nat) address)
           nat
           { UNPAIR ; SWAP ; GET ; IF_NONE { PUSH nat 0 } {} } ;
         LAMBDA
           (pair (big_map address nat) address nat)
           (big_map address nat)
           { UNPAIR 3 ; DIG 2 ; SOME ; DIG 2 ; UPDATE } ;
         LAMBDA
           address
           unit
           { PUSH string "The sender can only manage operators for his own token" ;
             SENDER ;
             DIG 2 ;
             COMPARE ;
             EQ ;
             IF { DROP ; UNIT } { FAILWITH } } ;
         DIG 3 ;
         UNPAIR ;
         IF_LEFT
           { DIG 2 ;
             DIG 3 ;
             DROP 2 ;
             IF_LEFT
               { UNPAIR ;
                 SWAP ;
                 MAP { DUP ; CAR ; DUP 4 ; CAR ; CAR ; PAIR ; DUP 5 ; SWAP ; EXEC ; PAIR } ;
                 DIG 3 ;
                 DROP ;
                 SWAP ;
                 PUSH mutez 0 ;
                 DIG 2 ;
                 TRANSFER_TOKENS ;
                 SWAP ;
                 NIL operation ;
                 DIG 2 ;
                 CONS ;
                 PAIR }
               { DIG 2 ;
                 DROP ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 NIL operation ;
                 DIG 2 ;
                 CAR ;
                 PUSH mutez 0 ;
                 DIG 4 ;
                 CDR ;
                 CDR ;
                 TRANSFER_TOKENS ;
                 CONS ;
                 PAIR } }
           { IF_LEFT
               { DIG 2 ;
                 DROP ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CAR ;
                 SWAP ;
                 ITER { UNPAIR ;
                        DUG 2 ;
                        ITER { UNPAIR ;
                               SENDER ;
                               DUP 5 ;
                               SWAP ;
                               DUP ;
                               DUG 2 ;
                               COMPARE ;
                               EQ ;
                               IF { DROP ; UNIT }
                                  { DUP 6 ;
                                    CAR ;
                                    CDR ;
                                    DUP 6 ;
                                    GET ;
                                    IF_NONE { EMPTY_SET address } {} ;
                                    SWAP ;
                                    MEM ;
                                    IF { UNIT } { PUSH string "FA2_NOT_OPERATOR" ; FAILWITH } } ;
                               DROP ;
                               DUP 4 ;
                               DUP 4 ;
                               PAIR ;
                               DUP 8 ;
                               SWAP ;
                               EXEC ;
                               PUSH string "FA2_INSUFFICIENT_BALANCE" ;
                               DUP 4 ;
                               DUP 3 ;
                               COMPARE ;
                               GE ;
                               IF { DROP } { FAILWITH } ;
                               DUP 3 ;
                               SWAP ;
                               SUB ;
                               ABS ;
                               DUP 5 ;
                               DIG 4 ;
                               PAIR 3 ;
                               DUP 6 ;
                               SWAP ;
                               EXEC ;
                               SWAP ;
                               DUP ;
                               DUG 2 ;
                               SWAP ;
                               DUP ;
                               DUG 2 ;
                               PAIR ;
                               DUP 8 ;
                               SWAP ;
                               EXEC ;
                               DIG 3 ;
                               ADD ;
                               DUG 2 ;
                               PAIR 3 ;
                               DUP 4 ;
                               SWAP ;
                               EXEC } ;
                        SWAP ;
                        DROP } ;
                 DIG 2 ;
                 DIG 3 ;
                 DROP 2 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 DIG 2 ;
                 CAR ;
                 CDR ;
                 DIG 2 ;
                 PAIR ;
                 PAIR ;
                 NIL operation ;
                 PAIR }
               { DIG 3 ;
                 DIG 4 ;
                 DROP 2 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CDR ;
                 SWAP ;
                 ITER { IF_LEFT
                          { UNPAIR 3 ;
                            DIG 2 ;
                            DROP ;
                            SWAP ;
                            DUP ;
                            DUG 2 ;
                            SWAP ;
                            DUP ;
                            DUG 2 ;
                            COMPARE ;
                            EQ ;
                            IF { DROP 2 }
                               { DUP ;
                                 DUP 6 ;
                                 SWAP ;
                                 EXEC ;
                                 DROP ;
                                 DIG 2 ;
                                 DUP ;
                                 DUP 3 ;
                                 GET ;
                                 IF_NONE { EMPTY_SET address } {} ;
                                 DIG 3 ;
                                 PUSH bool True ;
                                 SWAP ;
                                 UPDATE ;
                                 SOME ;
                                 DIG 2 ;
                                 UPDATE } }
                          { UNPAIR 3 ;
                            DIG 2 ;
                            DROP ;
                            SWAP ;
                            DUP ;
                            DUG 2 ;
                            SWAP ;
                            DUP ;
                            DUG 2 ;
                            COMPARE ;
                            EQ ;
                            IF { DROP 2 }
                               { DUP ;
                                 DUP 6 ;
                                 SWAP ;
                                 EXEC ;
                                 DROP ;
                                 DIG 2 ;
                                 DUP ;
                                 DUP 3 ;
                                 GET ;
                                 IF_NONE
                                   { DIG 2 ; DROP ; NONE (set address) }
                                   { DIG 3 ;
                                     PUSH bool False ;
                                     SWAP ;
                                     UPDATE ;
                                     PUSH nat 0 ;
                                     SWAP ;
                                     DUP ;
                                     DUG 2 ;
                                     SIZE ;
                                     COMPARE ;
                                     EQ ;
                                     IF { DROP ; NONE (set address) } { SOME } } ;
                                 DIG 2 ;
                                 UPDATE } } } ;
                 DIG 2 ;
                 DROP ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 SWAP ;
                 DIG 2 ;
                 CAR ;
                 CAR ;
                 PAIR ;
                 PAIR ;
                 NIL operation ;
                 PAIR } } } }

